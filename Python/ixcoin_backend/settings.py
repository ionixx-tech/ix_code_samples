"""
Django settings for ixcoin project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'p712gq$==!vy$z+$3_c^5(4_tr(1a)m307we-v#!)xv*^s9ek%'

ENVIRONMENT_DEVELOPMENT = "DEVELOPMENT"
ENVIRONMENT_STAGING = "STAGING"
ENVIRONMENT_PRODUCTION = "PRODUCTION"

# TODO Mandatory Field
ENVIRONMENT = ENVIRONMENT_DEVELOPMENT

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'ixcoin_backend.api',
    'ixcoin_backend.api.accounts',
    'ixcoin_backend.api.community',
    'oauth2_provider',
    # handles cors headers, self explanatory
    'corsheaders',
    'rest_framework_swagger',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'ixcoin_backend.api.permissions.SessionValidator',

]

ROOT_URLCONF = 'ixcoin_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ixcoin_backend.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

# Static files (CSS, JavaScript, Images)
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collect static to find static files.
STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, 'static'),
)

CORS_ORIGIN_ALLOW_ALL = True

STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'
OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL = 'oauth2_provider.AccessToken'

APP_NAME = os.environ.get("APP_NAME", "IxCoin Web Portal")

if ENVIRONMENT == ENVIRONMENT_DEVELOPMENT:
    DEBUG = True

    DATABASE_CONFIG = {'default': {'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': 'ixcoin-local',
                                   'HOST': 'localhost', 'PORT': 5432, 'USER': 'ionixx', 'PASSWORD': 'root'}}

    FRONT_END_URL = os.environ.get("FRONT_END_URL", "http://localhost:4200")

    # EMAIL CONFIGURATION
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'vivek.tamilarasan@ionixxtech.com')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '*********')
    DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'vivek.tamilarasan@ionixxtech.com')
    ADMIN_EMAIL = os.environ.get('ADMIN_EMAIL', 'vivek.tamilarasan@ionixxtech.com')

elif ENVIRONMENT == ENVIRONMENT_STAGING:
    DEBUG = True

    DATABASE_CONFIG = {'default': {'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': 'd1c9n81ptu0gsk',
                                   'HOST': 'ec2-174-129-33-29.compute-1.amazonaws.com', 'PORT': 5432,
                                   'USER': 'ozonyvtdpirrue',
                                   'PASSWORD': '7fb9a111d89b2b9d4c77528ba6865eb42dde8db0923d9747c3912d88fb8be2c2'}}

    FRONT_END_URL = os.environ.get("FRONT_END_URL")

    # EMAIL CONFIGURATION
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')
    ADMIN_EMAIL = os.environ.get('ADMIN_EMAIL')

elif ENVIRONMENT == ENVIRONMENT_PRODUCTION:
    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = False
    if DEBUG is True:
        print("\n**DEBUG is set as True in production environment, It should be changed to False inorder to run the "
              "application in production\n")
        raise ValueError

    DATABASE_CONFIG = {'default': {'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': 'd1c9n81ptu0gsk',
                                   'HOST': 'ec2-174-129-33-29.compute-1.amazonaws.com', 'PORT': 5432,
                                   'USER': 'ozonyvtdpirrue',
                                   'PASSWORD': '7fb9a111d89b2b9d4c77528ba6865eb42dde8db0923d9747c3912d88fb8be2c2'}}

    FRONT_END_URL = os.environ.get("FRONT_END_URL")

    # EMAIL CONFIGURATION
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')
    ADMIN_EMAIL = os.environ.get('ADMIN_EMAIL')

else:
    raise ValueError

# Database Configuration
try:
    from .databases import DBCONFIG
except ImportError:

    DATABASES = DATABASE_CONFIG
else:
    DATABASES = DBCONFIG

# Constants
COMPANY_EMAIL = os.environ.get("COMPANY_EMAIL", "contact@ionixxtect.com")

FORGOT_PASSWORD_EMAIL_URL = FRONT_END_URL + "/forgot_password/"
FORGOT_PASSWORD_EMAIL_BODY = "We received a request to reset your Ixcoin web portal password.\n\nClick on below " \
                             "link to change your password.\n\n"

USER_ACCOUNT_ACTIVATE_SUBJECT = "Welcome to Ixcoin Portal - User account activation"
USER_ACCOUNT_ACTIVATE_BODY = "Hi %s, \n\nYour user account with the username " \
                             + "%s has been created. \n\nPlease follow the link below to " \
                               "activate your account. \n%s \n\nYou will be able " \
                               "to change your settings once your account is activated.\n\nIf you have not requested, " \
                               "you can just delete this email " + COMPANY_EMAIL
USER_ACCOUNT_ACTIVATE_LINK = FRONT_END_URL + "/activate/"

EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

SESSION_EXPIRE_MINUTES = 60
SESSION_SKIP_URLS = ['api/login', 'admin', "/api/forgot_password/", "crowdsale/", "crypto_currency", "ixcoin",
                     "contact-us", "activate", "docs"]

CROWD_SALE_START_TIME = int(os.environ.get("CROWD_SALE_START_TIME", 1520856000))
CROWD_SALE_END_TIME = int(os.environ.get("CROWD_SALE_END_TIME", 1521547200))
TOTAL_TOKEN_SUPPLY = int(os.environ.get("TOTAL_TOKEN_SUPPLY", 100000))

CURRENT_PRICE = os.environ.get("CURRENT_PRICE", 0.001)
CURRENCY_NAME = os.environ.get("CURRENCY_NAME", "IONIXX")
CURRENCY_SYMBOL = os.environ.get("CURRENCY_SYMBOL", "IX")

# TODO - Once CrowdSale is Completed, Disable this for market price calculation.
CROWD_SALE_ENABLED = os.environ.get("CROWD_SALE_ENABLED", True)

# BLOCKCHAIN CONFIGURATION
WEB3_OWNER_ACCOUNT = os.environ.get("WEB3_OWNER_ACCOUNT", "0xd713c627817dc87C88519A19Db08Aae7fDc2Ba66")  # Rinkeby

# Main Ethereum Network
MAIN_NET = "https://mainnet.infura.io/VWum3M92kaAOAr90RJqY"

# Test Ethereum Network (Ropsten)
ROPSTEN = "https://ropsten.infura.io/VWum3M92kaAOAr90RJqY"

# Test Ethereum Network (Rinkeby)
RINKEBY = "https://rinkeby.infura.io/VWum3M92kaAOAr90RJqY"

# Test Ethereum Network (Kovan)
KOVAN = "https://kovan.infura.io/VWum3M92kaAOAr90RJqY"

# IPFS Gateway
IPFS_GATEWAY = "https://ipfs.infura.io"

# IPFS RPC
IPFS_RPC = "https://ipfs.infura.io:5001"

# TODO - SELECT WEB3 HTTP URL HERE
WEB3_URL_SELECTION = os.environ.get('WEB3_URL_SELECTION', RINKEBY)

# Owner Configuration
OWNER_PRIVATE_KEY = "626202aab7f91b9cf0ffdf62607f52aa4efd075b660aa6bcb431fb945e8fc37d"

# the address that will send the test transaction
OWNER_ADDRESS = '0xd713c627817dc87C88519A19Db08Aae7fDc2Ba66'

# Contract Configuration
CONTRACT_ADDRESS_TOKEN_TRADE = "0x8ac418228173fd9169111f6f9bd3c916300ddaa0"
CONTRACT_ADDRESS_CROWD_SALE = "0x0aaffeba15a8f39a3474333f483dc7c8a06f1493"

GAS_PRICE_IN_GWI = '4'
